plugins {
    id 'de.benediktritter.maven-plugin-development' version '0.4.2'
}

configurations {
    takariWorkspace
}

dependencies {
    takariWorkspace('io.takari.m2e.workspace:org.eclipse.m2e.workspace.cli:0.4.0') {
        exclude group: 'javax.inject', module: 'javax.inject'
        exclude group: 'org.codehaus.plexus', module: 'plexus-component-annotations'
    }

    implementation project(':openapi-style-validator-lib')
    implementation 'io.swagger.parser.v3:swagger-parser:2.0.33'
    implementation 'org.openapitools.empoa:empoa-swagger-core:2.1.0'

    implementation 'org.apache.maven:maven-plugin-api:3.9.4'
    compileOnly 'org.apache.maven.plugin-tools:maven-plugin-annotations:3.9.0'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.hamcrest:hamcrest-core:2.2'
    testImplementation 'io.takari.maven.plugins:takari-plugin-testing:3.0.1'
    testImplementation 'io.takari.maven.plugins:takari-plugin-integration-testing:3.0.1'
    testImplementation 'org.assertj:assertj-core:3.24.2'
    testRuntimeOnly 'org.apache.maven:maven-compat:3.9.4'
    testRuntimeOnly 'org.apache.maven:maven-core:3.9.5'
}

mavenPlugin {
    artifactId = 'openapi-style-validator-maven-plugin'
}

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'openapi-style-validator-maven-plugin'
            pom {
                name = 'OpenAPI Style Validator - maven-plugin'
                description = 'Maven plugin to validate the style and standards of an OpenAPI specification'
                url = 'https://openapitools.github.io/openapi-style-validator/'
                inceptionYear = '2020'
                licenses {
                    license {
                        name = 'Apache 2.0 License'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0'
                    }
                }
                developers {
                    developer {
                        id = 'JFCote'
                        name = 'Jean-Francois Cote'
                        email = 'jcote@stingray.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/openapitools/openapi-style-validator.git'
                    developerConnection = 'scm:git:https://github.com/openapitools/openapi-style-validator.git'
                    url = 'https://github.com/openapitools/openapi-style-validator/'
                }
            }
            from components.java
        }
    }
}

// Add the mojo descriptor to the test source-set (workaround https://github.com/britter/maven-plugin-development/issues/76)
sourceSets.test.output.dir file("$buildDir/mavenPlugin/descriptor"), builtBy: generateMavenPluginDescriptor

def genOutputDir = file("$buildDir/generated/test-resources")

task generateTakariTestResources {
    dependsOn getRootProject().getTasksByName("jar", true)
    dependsOn getRootProject().getTasksByName("generatePomFileForMavenJavaPublication", true)

    def testProperties = new File(genOutputDir, "test.properties")
    outputs.file(testProperties)

    def workspaceStateProperties = file("$buildDir/maven-work/workspacestate.properties")
    outputs.file(workspaceStateProperties)

    doLast {
        // Generate 'workspacestate.properties' file
        java.util.Properties workspaceProp = new java.util.Properties();
        getRootProject().getAllprojects().each { prj -> 
            def ext = prj.getExtensions().findByType(PublishingExtension.class);
            if(ext != null) {
                ext.getPublications().each { pub -> 
                    addProject(workspaceProp, prj)
                }
            }
        }
        workspaceProp.store(new java.io.FileOutputStream(workspaceStateProperties), "workspace state file")

        // Generate 'test.properties' file
        // See https://github.com/takari/takari-plugin-testing-project/blob/master/testproperties.md
        java.util.Properties testProp = new java.util.Properties();

        testProp.setProperty("project.groupId", getProject().getGroup().toString());
        testProp.setProperty("project.artifactId", getProject().getConvention().getPlugin(BasePluginConvention.class).getArchivesBaseName());
        testProp.setProperty("project.version", getProject().getVersion().toString());

        testProp.setProperty("classpath", "" + jar.archiveFile.get().asFile + ":" + configurations.runtimeClasspath.getAsPath());

        testProp.setProperty("localRepository", System.getProperty("user.home") + "/.m2/repository");
        testProp.setProperty("repository.0", "<id>central</id><url>https://repo.maven.apache.org/maven2</url><releases><enabled>true</enabled></releases><snapshots><enabled>false</enabled></snapshots>");
        testProp.setProperty("updateSnapshots", "false");
        File userSettingsFile = new File(System.getProperty("user.home") + "/.m2/settings.xml")
        if (userSettingsFile.exists()) {
            testProp.setProperty("userSettingsFile", userSettingsFile.getAbsolutePath());
        }
        testProp.setProperty("workspaceResolver", project.configurations.takariWorkspace.asPath);
        testProp.setProperty("workspaceStateProperties", workspaceStateProperties.getAbsolutePath());

        testProp.store(new java.io.FileOutputStream(testProperties), "See https://github.com/takari/takari-plugin-testing-project/blob/master/testproperties.md")
    }
}

def void addProject(java.util.Properties workspaceProp, Project p) {
    workspaceProp.setProperty(p.getGroup().toString() + ":" + p.getConvention().getPlugin(BasePluginConvention.class).getArchivesBaseName() + ":jar::" + p.getVersion().toString(), new File(p.getBuildDir(), "/libs/${p.getConvention().getPlugin(BasePluginConvention.class).getArchivesBaseName()}-${p.getVersion().toString()}.jar").getAbsolutePath());
    workspaceProp.setProperty(p.getGroup().toString() + ":" + p.getConvention().getPlugin(BasePluginConvention.class).getArchivesBaseName() + ":pom::" + p.getVersion().toString(), new File(p.getBuildDir(), "/publications/mavenJava/pom-default.xml").getAbsolutePath());
}

sourceSets.test.output.dir genOutputDir, builtBy: generateTakariTestResources
